package com.lzc.exovideo.downloader.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.lzc.exovideo.db.entity.FilmInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FILM_INFO".
*/
public class FilmInfoDao extends AbstractDao<FilmInfo, Long> {

    public static final String TABLENAME = "FILM_INFO";

    /**
     * Properties of entity FilmInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property FilmId = new Property(1, String.class, "filmId", false, "FILM_ID");
        public final static Property FilmType = new Property(2, String.class, "filmType", false, "FILM_TYPE");
        public final static Property FilmName = new Property(3, String.class, "filmName", false, "FILM_NAME");
        public final static Property FileLink = new Property(4, String.class, "fileLink", false, "FILE_LINK");
        public final static Property UpdateTime = new Property(5, java.util.Date.class, "updateTime", false, "UPDATE_TIME");
        public final static Property From = new Property(6, String.class, "from", false, "FROM");
    }


    public FilmInfoDao(DaoConfig config) {
        super(config);
    }
    
    public FilmInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FILM_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"FILM_ID\" TEXT," + // 1: filmId
                "\"FILM_TYPE\" TEXT," + // 2: filmType
                "\"FILM_NAME\" TEXT," + // 3: filmName
                "\"FILE_LINK\" TEXT," + // 4: fileLink
                "\"UPDATE_TIME\" INTEGER," + // 5: updateTime
                "\"FROM\" TEXT);"); // 6: from
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FILM_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FilmInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String filmId = entity.getFilmId();
        if (filmId != null) {
            stmt.bindString(2, filmId);
        }
 
        String filmType = entity.getFilmType();
        if (filmType != null) {
            stmt.bindString(3, filmType);
        }
 
        String filmName = entity.getFilmName();
        if (filmName != null) {
            stmt.bindString(4, filmName);
        }
 
        String fileLink = entity.getFileLink();
        if (fileLink != null) {
            stmt.bindString(5, fileLink);
        }
 
        java.util.Date updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindLong(6, updateTime.getTime());
        }
 
        String from = entity.getFrom();
        if (from != null) {
            stmt.bindString(7, from);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FilmInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String filmId = entity.getFilmId();
        if (filmId != null) {
            stmt.bindString(2, filmId);
        }
 
        String filmType = entity.getFilmType();
        if (filmType != null) {
            stmt.bindString(3, filmType);
        }
 
        String filmName = entity.getFilmName();
        if (filmName != null) {
            stmt.bindString(4, filmName);
        }
 
        String fileLink = entity.getFileLink();
        if (fileLink != null) {
            stmt.bindString(5, fileLink);
        }
 
        java.util.Date updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindLong(6, updateTime.getTime());
        }
 
        String from = entity.getFrom();
        if (from != null) {
            stmt.bindString(7, from);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public FilmInfo readEntity(Cursor cursor, int offset) {
        FilmInfo entity = new FilmInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // filmId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // filmType
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // filmName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // fileLink
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)), // updateTime
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // from
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FilmInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFilmId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFilmType(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFilmName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFileLink(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUpdateTime(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
        entity.setFrom(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(FilmInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(FilmInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(FilmInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
