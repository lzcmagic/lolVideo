package com.lzc.exovideo.downloader.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.lzc.exovideo.db.entity.VideoDetailInfo.StringConverter;
import java.util.List;

import com.lzc.exovideo.db.entity.VideoDetailInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "VIDEO_DETAIL_INFO".
*/
public class VideoDetailInfoDao extends AbstractDao<VideoDetailInfo, Long> {

    public static final String TABLENAME = "VIDEO_DETAIL_INFO";

    /**
     * Properties of entity VideoDetailInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property DetailId = new Property(1, String.class, "detailId", false, "DETAIL_ID");
        public final static Property VideoCover = new Property(2, String.class, "videoCover", false, "VIDEO_COVER");
        public final static Property VideoName = new Property(3, String.class, "videoName", false, "VIDEO_NAME");
        public final static Property Descs = new Property(4, String.class, "descs", false, "DESCS");
        public final static Property Desc = new Property(5, String.class, "desc", false, "DESC");
        public final static Property Urls = new Property(6, String.class, "urls", false, "URLS");
    }

    private final StringConverter descsConverter = new StringConverter();
    private final StringConverter urlsConverter = new StringConverter();

    public VideoDetailInfoDao(DaoConfig config) {
        super(config);
    }
    
    public VideoDetailInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"VIDEO_DETAIL_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"DETAIL_ID\" TEXT," + // 1: detailId
                "\"VIDEO_COVER\" TEXT," + // 2: videoCover
                "\"VIDEO_NAME\" TEXT," + // 3: videoName
                "\"DESCS\" TEXT," + // 4: descs
                "\"DESC\" TEXT," + // 5: desc
                "\"URLS\" TEXT);"); // 6: urls
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"VIDEO_DETAIL_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, VideoDetailInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String detailId = entity.getDetailId();
        if (detailId != null) {
            stmt.bindString(2, detailId);
        }
 
        String videoCover = entity.getVideoCover();
        if (videoCover != null) {
            stmt.bindString(3, videoCover);
        }
 
        String videoName = entity.getVideoName();
        if (videoName != null) {
            stmt.bindString(4, videoName);
        }
 
        List descs = entity.getDescs();
        if (descs != null) {
            stmt.bindString(5, descsConverter.convertToDatabaseValue(descs));
        }
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(6, desc);
        }
 
        List urls = entity.getUrls();
        if (urls != null) {
            stmt.bindString(7, urlsConverter.convertToDatabaseValue(urls));
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, VideoDetailInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String detailId = entity.getDetailId();
        if (detailId != null) {
            stmt.bindString(2, detailId);
        }
 
        String videoCover = entity.getVideoCover();
        if (videoCover != null) {
            stmt.bindString(3, videoCover);
        }
 
        String videoName = entity.getVideoName();
        if (videoName != null) {
            stmt.bindString(4, videoName);
        }
 
        List descs = entity.getDescs();
        if (descs != null) {
            stmt.bindString(5, descsConverter.convertToDatabaseValue(descs));
        }
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(6, desc);
        }
 
        List urls = entity.getUrls();
        if (urls != null) {
            stmt.bindString(7, urlsConverter.convertToDatabaseValue(urls));
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public VideoDetailInfo readEntity(Cursor cursor, int offset) {
        VideoDetailInfo entity = new VideoDetailInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // detailId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // videoCover
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // videoName
            cursor.isNull(offset + 4) ? null : descsConverter.convertToEntityProperty(cursor.getString(offset + 4)), // descs
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // desc
            cursor.isNull(offset + 6) ? null : urlsConverter.convertToEntityProperty(cursor.getString(offset + 6)) // urls
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, VideoDetailInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDetailId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setVideoCover(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setVideoName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDescs(cursor.isNull(offset + 4) ? null : descsConverter.convertToEntityProperty(cursor.getString(offset + 4)));
        entity.setDesc(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUrls(cursor.isNull(offset + 6) ? null : urlsConverter.convertToEntityProperty(cursor.getString(offset + 6)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(VideoDetailInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(VideoDetailInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(VideoDetailInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
